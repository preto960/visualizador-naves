{"version":3,"sources":["Item.js","ListNaves.js","Home.js","serviceWorker.js","index.js"],"names":["Item","className","this","props","name","Component","ListNaves","datanav","map","datanave","key","model","manufacturer","cost_in_credits","length","max_atmosphering_speed","crew","passengers","cargo_capacity","consumables","vehicle_class","pilots","created","edited","Home","state","naves1","naves2","naves3","naves4","seleccionNave","bind","axios","get","then","response","data","setState","results","e","value","target","dataNave","onChange","nav1each","nav1id","url","nav2each","nav2id","nav3each","nav3id","nav4each","nav4id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ec6a70e7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Item extends Component {\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n            <div className=\"executor\">\r\n                <label className=\"title1\">{this.props.name}</label>\r\n                <label className=\"text\">Executor-class star dreadnought</label>\r\n                <div className=\"line\"></div>\r\n                <label className=\"title2\">Fabricante</label>\r\n                <label className=\"text marg\">Kuat Drive Yards, Fondor Shipyards</label>\r\n                <label className=\"title2\">Largo</label>\r\n                <label className=\"text marg\">19.000 fts.</label>\r\n                <label className=\"title2\">Valor</label>\r\n                <label className=\"text marg\">1.143.350.000 cr√©ditos</label>\r\n                <label className=\"title2\">Cantidad pasajeros</label>\r\n                <label className=\"text marg\">38.000</label>\r\n            </div>\r\n            <div className=\"pasajeros\">\r\n                <label className=\"title1\">Pasajeros</label>\r\n                <div className=\"line\"></div>\r\n                <label className=\"text\">Chewbacca</label>\r\n                <label className=\"text\">Han Solo</label>\r\n                <label className=\"text\">Lando Calrissian</label>\r\n                <label className=\"text\">Nien Nunb</label>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport Item from './Item';\r\n\r\n\r\nclass ListNaves extends Component {\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n            {this.props.datanav.map((datanave) => {\r\n            return  <Item   key={datanave}\r\n                            name={datanave.name}\r\n                            model={datanave.model}\r\n                            manufacturer={datanave.manufacturer}\r\n                            cost_in_credits={datanave.cost_in_credits}\r\n                            length={datanave.length}\r\n                            max_atmosphering_speed={datanave.max_atmosphering_speed}\r\n                            crew={datanave.crew}\r\n                            passengers={datanave.passengers}\r\n                            cargo_capacity={datanave.cargo_capacity}\r\n                            consumables={datanave.consumables}\r\n                            vehicle_class={datanave.vehicle_class}\r\n                            pilots={datanave.pilots}\r\n                            created={datanave.created}\r\n                            edited={datanave.edited}\r\n                            />\r\n                })}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ListNaves;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport ListNaves from './ListNaves';\r\nimport './Style.css';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = { \r\n            naves1: [],\r\n            naves2: [],\r\n            naves3: [],\r\n            naves4: [],\r\n            datanave: []\r\n        }\r\n        this.seleccionNave = this.seleccionNave.bind(this);\r\n      }\r\n    componentDidMount() {\r\n        const nav1 = `https://swapi.co/api/vehicles/?page=1`;\r\n        axios.get(nav1).then(response => response.data)\r\n        .then((data) => {\r\n          this.setState({ naves1: data.results });\r\n        })\r\n        const nav2 = `https://swapi.co/api/vehicles/?page=2`;\r\n        axios.get(nav2).then(response => response.data)\r\n        .then((data) => {\r\n          this.setState({ naves2: data.results });\r\n        })\r\n        const nav3 = `https://swapi.co/api/vehicles/?page=3`;\r\n        axios.get(nav3).then(response => response.data)\r\n        .then((data) => {\r\n          this.setState({ naves3: data.results });\r\n        })\r\n        const nav4 = `https://swapi.co/api/vehicles/?page=4`;\r\n        axios.get(nav4).then(response => response.data)\r\n        .then((data) => {\r\n          this.setState({ naves4: data.results });\r\n        })\r\n    }\r\n\r\n    seleccionNave(e) {\r\n        let value = e.target.value;\r\n        axios.get(value).then(response => response.data)\r\n        .then((data) => {\r\n          this.setState({ dataNave: data });\r\n          //console.log(this.state.datanave)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form>\r\n                    <select onChange={this.seleccionNave}>\r\n                        <option value=\"Selecciona una Nave\">Selecciona una Nave</option>\r\n                        {this.state.naves1.map((nav1each,nav1id) => {\r\n                            return <option key={nav1id} value={nav1each.url}>{nav1each.name}</option>\r\n                        })}\r\n                        {this.state.naves2.map((nav2each,nav2id) => {\r\n                            return <option key={nav2id} value={nav2each.url}>{nav2each.name}</option>\r\n                        })}\r\n                        {this.state.naves3.map((nav3each,nav3id) => {\r\n                            return <option key={nav3id} value={nav3each.url}>{nav3each.name}</option>\r\n                        })}\r\n                        {this.state.naves4.map((nav4each,nav4id) => {\r\n                            return <option key={nav4id} value={nav4each.url}>{nav4each.name}</option>\r\n                        })}\r\n                    </select>\r\n                </form>\r\n                <ListNaves datanav={this.state.datanave}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}